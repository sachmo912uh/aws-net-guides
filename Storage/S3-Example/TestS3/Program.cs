using System; using System.IO; using System.Text; using System.Threading.Tasks; using Amazon; using Amazon.S3; using Amazon.S3.Model;  namespace S3_Example {     class Program     {         static string bucketName = "bucket-" + Guid.NewGuid().ToString("n").Substring(0, 8);         static string key = "key-" + Guid.NewGuid().ToString("n").Substring(0, 8);          static void Main(string[] args)         {             AmazonS3Client s3 = new AmazonS3Client(RegionEndpoint.USWest2);              CreateBucket(s3);             Console.WriteLine("Press enter to continue...");             Console.Read();              ListBuckets(s3);             Console.WriteLine("Press enter to continue...");             Console.Read();              WriteObject(s3);             Console.WriteLine("Press enter to continue...");             Console.Read();              ListObjects(s3);             Console.WriteLine("Press enter to continue...");             Console.Read();              ReadObject(s3);             Console.WriteLine("Press enter to continue...");             Console.Read();              DeleteObject(s3);             Console.WriteLine("Press enter to continue...");             Console.Read();              DeleteBucket(s3);         }          static void CreateBucket(AmazonS3Client s3)         {             PutBucketRequest req = new PutBucketRequest();             req.BucketName = bucketName;             req.BucketRegion = S3Region.USW2;              Task<PutBucketResponse> res = s3.PutBucketAsync(req);              Task.WaitAll(res);              if (res.IsCompletedSuccessfully)             {                 Console.WriteLine("New S3 bucket created: {0}", bucketName);             }         }          static void WriteObject(AmazonS3Client s3)         {             MemoryStream ms = new MemoryStream(Encoding.UTF8.GetBytes("Test S3 data"));              PutObjectRequest req = new PutObjectRequest();             req.BucketName = bucketName;             req.Key = key;             req.InputStream = ms;              Task<PutObjectResponse> res = s3.PutObjectAsync(req);              Task.WaitAll(res);              if (res.IsCompletedSuccessfully)             {                 Console.WriteLine("Created object '{0}' in bucket '{1}'", key, bucketName);             }         }          static void ReadObject(AmazonS3Client s3)         {             GetObjectRequest req = new GetObjectRequest();             req.BucketName = bucketName;             req.Key = key;              Task<GetObjectResponse> res = s3.GetObjectAsync(req);              Task.WaitAll(res);              if (res.IsCompletedSuccessfully)             {                 using (TextReader tr = new StreamReader(res.Result.ResponseStream))                 {                     Console.WriteLine("Retrieved contents of object '{0}' in bucket '{1}'", key, bucketName);                     Console.WriteLine(tr.ReadToEnd());                 }             }         }          static void ListBuckets(AmazonS3Client s3)         {             ListBucketsRequest req = new ListBucketsRequest();              Task<ListBucketsResponse> res = s3.ListBucketsAsync(req);              Task.WaitAll(res);              Console.WriteLine("List of S3 Buckets in your AWS Account");             foreach (var bucket in res.Result.Buckets)             {                 Console.WriteLine(bucket.BucketName);             }         }          static void ListObjects(AmazonS3Client s3)         {             ListObjectsRequest req = new ListObjectsRequest();             req.BucketName = bucketName;             req.MaxKeys = 100;              Task<ListObjectsResponse> res = s3.ListObjectsAsync(req);              Task.WaitAll(res);              Console.WriteLine("List of objects in your S3 Bucket '{0}'", bucketName);               foreach (var s3Object in res.Result.S3Objects)             {                 Console.WriteLine(s3Object.Key);             }         }          static void DeleteObject(AmazonS3Client s3)         {             DeleteObjectRequest req = new DeleteObjectRequest();             req.BucketName = bucketName;             req.Key = key;              Task<DeleteObjectResponse> res = s3.DeleteObjectAsync(req);              Task.WaitAll(res);              if (res.IsCompletedSuccessfully)             {                 Console.WriteLine("Deleted object '{0}' from bucket '{1}'", key, bucketName);             }         }          static void DeleteBucket(AmazonS3Client s3)         {             DeleteBucketRequest req = new DeleteBucketRequest();             req.BucketName = bucketName;              Task<DeleteBucketResponse> res = s3.DeleteBucketAsync(req);              Task.WaitAll(res);              if (res.IsCompletedSuccessfully)             {                 Console.WriteLine("Deleted bucket - '{0}'", bucketName);             }         }     } } 